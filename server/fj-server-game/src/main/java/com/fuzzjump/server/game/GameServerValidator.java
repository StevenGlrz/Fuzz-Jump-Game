package com.fuzzjump.server.game;


import com.fuzzjump.server.common.messages.join.Join;
import com.steveadoo.server.base.Player;
import com.steveadoo.server.base.validation.Validator;

import java.math.BigInteger;
import java.security.SecureRandom;
import java.util.Iterator;
import java.util.Map;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.TimeUnit;

public class GameServerValidator implements Validator {

    private static final long PURGE_RATE = 5000;
    private static final long KEY_DURATION = 30000;

    private static final SecureRandom SECURE_RANDOM = new SecureRandom();

    private final GameServer gameServer;

    private ConcurrentHashMap<String, Long> sessionKeys = new ConcurrentHashMap<>();

    public GameServerValidator(GameServer gameServer) {
        this.gameServer = gameServer;
    }

    @Override
    public void init() {
        this.gameServer.getExecutorService().scheduleAtFixedRate(this::purgeOldKeys, 0, PURGE_RATE, TimeUnit.MILLISECONDS);
    }

    /**
     * Removes old session keys from the map (eg someone fails to make a connection to the game
     */
    private void purgeOldKeys() {
        Iterator<Map.Entry<String, Long>> entries = sessionKeys.entrySet().iterator();
        while(entries.hasNext()) {
            Map.Entry<String, Long> entry = entries.next();
            long time = entry.getValue();
            if (System.currentTimeMillis() - time > KEY_DURATION) {
                entries.remove();
            }
        }
    }

    @Override
    public boolean matches(Class<?> clazz, Object message) {
        return clazz == Join.JoinPacket.class && ((Join.JoinPacket) message).hasServerSessionKey();
    }

    /**
     * The game server only lets you connect w/ game server session keys(eg, not keys generated by the web api).
     */
    @Override
    public CompletableFuture<Boolean> validate(Player player, Object message) {
        Join.JoinPacket joinPacket = (Join.JoinPacket) message;
        if (!sessionKeys.containsKey(joinPacket.getServerSessionKey())) {
            return CompletableFuture.completedFuture(false);
        }
        sessionKeys.remove(joinPacket.getServerSessionKey());
        return CompletableFuture.completedFuture(true);
    }

    /**
     * Generates and stores sessionKeys for joining this server
     * TODO should we attach profile id to this?
     */
    public String[] generateSessionKeys(int keyCount) {
        String[] keys = new String[keyCount];
        for(int i = 0; i < keyCount; i++) {
            String key = new BigInteger(130, SECURE_RANDOM).toString(32);
            keys[i] = key;
            sessionKeys.put(key, System.currentTimeMillis());
        }
        return keys;
    }

}
