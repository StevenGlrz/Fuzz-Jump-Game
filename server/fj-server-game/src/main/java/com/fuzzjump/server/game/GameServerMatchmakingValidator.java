package com.fuzzjump.server.game;


import com.fuzzjump.server.base.FuzzJumpPlayer;
import com.fuzzjump.server.common.messages.join.Join;
import com.steveadoo.server.base.Player;
import com.steveadoo.server.base.validation.Validator;
import com.steveadoo.server.common.packets.Validation;

import java.util.Iterator;
import java.util.Map;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.TimeUnit;

public class GameServerMatchmakingValidator implements Validator {

    private final GameServer gameServer;

    private ConcurrentHashMap<String, Long> sessionKeys = new ConcurrentHashMap<>();

    public GameServerMatchmakingValidator(GameServer gameServer) {
        this.gameServer = gameServer;
    }

    @Override
    public void init() {
    }

    @Override
    public boolean matches(Class<?> clazz, Object message) {
        return clazz == Join.JoinServerPacket.class && ((Join.JoinServerPacket) message).hasSessionKey();
    }

    /**
     * The game server only lets you connect w/ game server session keys(eg, not keys generated by the web api).
     */
    @Override
    public CompletableFuture<Boolean> validate(Player player, Object message) {
        Join.JoinServerPacket packet = (Join.JoinServerPacket) message;
        if (!packet.hasSessionKey()) {
            player.getChannel().writeAndFlush(getJoinResponse(false));
            return CompletableFuture.completedFuture(false);
        }
        FuzzJumpPlayer fjPlayer = (FuzzJumpPlayer) player;
        fjPlayer.setServer(true);
        CompletableFuture<Boolean> future = new CompletableFuture<>();
        gameServer.getApi().getSessionService().verifyServer(packet.getMachineName(), "MATCH->GAME", packet.getSessionKey())
                .map(response -> response != null && response.getBody())
                .onErrorReturn(err -> false)
                .subscribe(validated -> {
                    player.getChannel().writeAndFlush(getJoinResponse(validated));
                    future.complete(validated);
                });

        return future;
    }

    private Join.JoinResponsePacket getJoinResponse(boolean valid) {
        return Join.JoinResponsePacket.newBuilder()
                .setRedirect(false)
                .setServerIp(gameServer.getServerInfo().ip)
                .setServerPort(gameServer.getServerInfo().port)
                .setStatus(valid ? Validation.AUTHORIZED : Validation.UNAUTHORIZED)
                .build();
    }

}
